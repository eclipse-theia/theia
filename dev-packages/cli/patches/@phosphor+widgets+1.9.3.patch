diff --git a/node_modules/@phosphor/widgets/lib/menu.d.ts b/node_modules/@phosphor/widgets/lib/menu.d.ts
index 5d5053c..7802167 100644
--- a/node_modules/@phosphor/widgets/lib/menu.d.ts
+++ b/node_modules/@phosphor/widgets/lib/menu.d.ts
@@ -195,7 +195,7 @@ export declare class Menu extends Widget {
      *
      * This is a no-op if the menu is already attached to the DOM.
      */
-    open(x: number, y: number, options?: Menu.IOpenOptions): void;
+    open(x: number, y: number, options?: Menu.IOpenOptions, anchor?: HTMLElement): void;
     /**
      * Handle the DOM events for the menu.
      *
diff --git a/node_modules/@phosphor/widgets/lib/menu.js b/node_modules/@phosphor/widgets/lib/menu.js
index de23022..a8b15b1 100644
--- a/node_modules/@phosphor/widgets/lib/menu.js
+++ b/node_modules/@phosphor/widgets/lib/menu.js
@@ -13,7 +13,7 @@ var __extends = (this && this.__extends) || (function () {
     };
 })();
 var __assign = (this && this.__assign) || function () {
-    __assign = Object.assign || function(t) {
+    __assign = Object.assign || function (t) {
         for (var s, i = 1, n = arguments.length; i < n; i++) {
             s = arguments[i];
             for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
@@ -424,7 +424,7 @@ var Menu = /** @class */ (function (_super) {
      *
      * This is a no-op if the menu is already attached to the DOM.
      */
-    Menu.prototype.open = function (x, y, options) {
+    Menu.prototype.open = function (x, y, options, node) {
         if (options === void 0) { options = {}; }
         // Bail early if the menu is already attached.
         if (this.isAttached) {
@@ -434,7 +434,7 @@ var Menu = /** @class */ (function (_super) {
         var forceX = options.forceX || false;
         var forceY = options.forceY || false;
         // Open the menu as a root menu.
-        Private.openRootMenu(this, x, y, forceX, forceY);
+        Private.openRootMenu(this, x, y, forceX, forceY, node);
         // Activate the menu to accept keyboard input.
         this.activate();
     };
@@ -484,8 +484,16 @@ var Menu = /** @class */ (function (_super) {
         this.node.addEventListener('mouseenter', this);
         this.node.addEventListener('mouseleave', this);
         this.node.addEventListener('contextmenu', this);
-        document.addEventListener('mousedown', this, true);
     };
+
+    Menu.prototype.onAfterAttach = function (msg) {
+        this.node.ownerDocument.addEventListener('mousedown', this, true);
+    }
+
+    Menu.prototype.onBeforeDetach = function (msg) {
+        this.node.ownerDocument.removeEventListener('mousedown', this, true);
+    }
+
     /**
      * A message handler invoked on an `'after-detach'` message.
      */
@@ -496,7 +504,6 @@ var Menu = /** @class */ (function (_super) {
         this.node.removeEventListener('mouseenter', this);
         this.node.removeEventListener('mouseleave', this);
         this.node.removeEventListener('contextmenu', this);
-        document.removeEventListener('mousedown', this, true);
     };
     /**
      * A message handler invoked on an `'activate-request'` message.
@@ -1124,14 +1131,15 @@ var Private;
     /**
      * Open a menu as a root menu at the target location.
      */
-    function openRootMenu(menu, x, y, forceX, forceY) {
+    function openRootMenu(menu, x, y, forceX, forceY, element) {
         // Ensure the menu is updated before attaching and measuring.
         messaging_1.MessageLoop.sendMessage(menu, widget_1.Widget.Msg.UpdateRequest);
         // Get the current position and size of the main viewport.
+        var doc = element ? element.ownerDocument : document;
         var px = window.pageXOffset;
         var py = window.pageYOffset;
-        var cw = document.documentElement.clientWidth;
-        var ch = document.documentElement.clientHeight;
+        var cw = doc.documentElement.clientWidth;
+        var ch = doc.documentElement.clientHeight;
         // Compute the maximum allowed height for the menu.
         var maxHeight = ch - (forceY ? y : 0);
         // Fetch common variables.
@@ -1145,7 +1153,7 @@ var Private;
         style.visibility = 'hidden';
         style.maxHeight = maxHeight + "px";
         // Attach the menu to the document.
-        widget_1.Widget.attach(menu, document.body);
+        widget_1.Widget.attach(menu, doc.body);
         // Measure the size of the menu.
         var _a = node.getBoundingClientRect(), width = _a.width, height = _a.height;
         // Adjust the X position of the menu to fit on-screen.
@@ -1177,8 +1185,8 @@ var Private;
         // Get the current position and size of the main viewport.
         var px = window.pageXOffset;
         var py = window.pageYOffset;
-        var cw = document.documentElement.clientWidth;
-        var ch = document.documentElement.clientHeight;
+        var cw = itemNode.ownerDocument.documentElement.clientWidth;
+        var ch = itemNode.ownerDocument.documentElement.clientHeight;
         // Compute the maximum allowed height for the menu.
         var maxHeight = ch;
         // Fetch common variables.
@@ -1192,7 +1200,7 @@ var Private;
         style.visibility = 'hidden';
         style.maxHeight = maxHeight + "px";
         // Attach the menu to the document.
-        widget_1.Widget.attach(submenu, document.body);
+        widget_1.Widget.attach(submenu, itemNode.ownerDocument.body);
         // Measure the size of the menu.
         var _a = node.getBoundingClientRect(), width = _a.width, height = _a.height;
         // Compute the box sizing for the menu.
diff --git a/node_modules/@phosphor/widgets/lib/menubar.js b/node_modules/@phosphor/widgets/lib/menubar.js
index a8e10f4..da2ee82 100644
--- a/node_modules/@phosphor/widgets/lib/menubar.js
+++ b/node_modules/@phosphor/widgets/lib/menubar.js
@@ -521,7 +521,7 @@ var MenuBar = /** @class */ (function (_super) {
         // Get the positioning data for the new menu.
         var _a = itemNode.getBoundingClientRect(), left = _a.left, bottom = _a.bottom;
         // Open the new menu at the computed location.
-        newMenu.open(left, bottom, { forceX: true, forceY: true });
+        newMenu.open(left, bottom, { forceX: true, forceY: true }, this.node);
     };
     /**
      * Close the child menu immediately.
diff --git a/node_modules/@phosphor/widgets/lib/widget.js b/node_modules/@phosphor/widgets/lib/widget.js
index 01241fa..62da27c 100644
--- a/node_modules/@phosphor/widgets/lib/widget.js
+++ b/node_modules/@phosphor/widgets/lib/widget.js
@@ -906,10 +906,10 @@ exports.Widget = Widget;
         if (widget.parent) {
             throw new Error('Cannot attach a child widget.');
         }
-        if (widget.isAttached || document.body.contains(widget.node)) {
+        if (widget.isAttached || widget.node.ownerDocument.body.contains(widget.node)) {
             throw new Error('Widget is already attached.');
         }
-        if (!document.body.contains(host)) {
+        if (!host.ownerDocument.body.contains(host)) {
             throw new Error('Host is not attached.');
         }
         messaging_1.MessageLoop.sendMessage(widget, Widget.Msg.BeforeAttach);
@@ -930,7 +930,7 @@ exports.Widget = Widget;
         if (widget.parent) {
             throw new Error('Cannot detach a child widget.');
         }
-        if (!widget.isAttached || !document.body.contains(widget.node)) {
+        if (!widget.isAttached || !widget.node.ownerDocument.body.contains(widget.node)) {
             throw new Error('Widget is not attached.');
         }
         messaging_1.MessageLoop.sendMessage(widget, Widget.Msg.BeforeDetach);
