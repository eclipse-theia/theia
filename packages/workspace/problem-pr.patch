diff --git a/packages/ai-core/src/browser/theia-variable-contribution.ts b/packages/ai-core/src/browser/theia-variable-contribution.ts
index af611e882c9..c5a0f0de991 100644
--- a/packages/ai-core/src/browser/theia-variable-contribution.ts
+++ b/packages/ai-core/src/browser/theia-variable-contribution.ts
@@ -17,7 +17,6 @@ import { FrontendApplicationStateService } from '@theia/core/lib/browser/fronten
 import { nls } from '@theia/core/lib/common/nls';
 import { inject, injectable } from '@theia/core/shared/inversify';
 import { VariableRegistry, VariableResolverService } from '@theia/variable-resolver/lib/browser';
-import { EditorManager } from '@theia/editor/lib/browser/editor-manager';
 import { AIVariableContribution, AIVariableResolver, AIVariableService, AIVariableResolutionRequest, AIVariableContext, ResolvedAIVariable } from '../common';
 
 /**
@@ -45,9 +44,6 @@ export class TheiaVariableContribution implements AIVariableContribution, AIVari
     @inject(FrontendApplicationStateService)
     protected readonly stateService: FrontendApplicationStateService;
 
-    @inject(EditorManager)
-    protected readonly editorManager: EditorManager;
-
     // Map original variable name to one or more mappings with new name and description.
     // Only variables present in this map are registered.
     protected variableRenameMap: Map<string, VariableMapping[]> = new Map([
@@ -92,14 +88,15 @@ export class TheiaVariableContribution implements AIVariableContribution, AIVari
                 containing the currently opened file.')
             }
         ]],
-        ['lineNumber', [{}]],
-        ['workspaceFolder', [{}]],
-        ['openFiles', [
+        ['openFilesRelative', [
             {
-                name: 'openFiles',
-                description: nls.localize('theia/ai/core/variable-contribution/openFiles', 'A list of absolute paths of all currently open files.')
+                name: '_ff',
+                description: nls.localize('theia/ai/core/variable-contribution/allOpenFiles', 'Short reference to all currently open files \
+                (relative paths, comma-separated)')
             }
-        ]]
+        ]],
+        ['lineNumber', [{}]],
+        ['workspaceFolder', [{}]]
     ]);
 
     registerVariables(service: AIVariableService): void {
@@ -157,13 +154,6 @@ export class TheiaVariableContribution implements AIVariableContribution, AIVari
     }
 
     async resolve(request: AIVariableResolutionRequest, context: AIVariableContext): Promise<ResolvedAIVariable | undefined> {
-        if (request.variable.id === 'theia-openFiles') {
-            // Get all open editor URIs
-            const openFiles = this.editorManager.all.map(widget => widget.editor.uri.toString());
-            // Return as a JSON array string
-            return { value: JSON.stringify(openFiles), variable: request.variable };
-        }
-
         const resolved = await this.variableResolverService.resolve(this.toTheiaVariable(request), context);
         return resolved ? { value: resolved, variable: request.variable } : undefined;
     }
diff --git a/packages/workspace/src/browser/workspace-variable-contribution.ts b/packages/workspace/src/browser/workspace-variable-contribution.ts
index 6d3e808bd45..f3dc91e8b30 100644
--- a/packages/workspace/src/browser/workspace-variable-contribution.ts
+++ b/packages/workspace/src/browser/workspace-variable-contribution.ts
@@ -21,6 +21,7 @@ import { ApplicationShell, NavigatableWidget, WidgetManager } from '@theia/core/
 import { VariableContribution, VariableRegistry, Variable } from '@theia/variable-resolver/lib/browser';
 import { WorkspaceService } from './workspace-service';
 import { FileService } from '@theia/filesystem/lib/browser/file-service';
+import { EditorManager } from '@theia/editor/lib/browser';
 
 @injectable()
 export class WorkspaceVariableContribution implements VariableContribution {
@@ -33,6 +34,8 @@ export class WorkspaceVariableContribution implements VariableContribution {
     protected readonly fileService: FileService;
     @inject(WidgetManager)
     protected readonly widgetManager: WidgetManager;
+    @inject(EditorManager)
+    protected readonly editorManager: EditorManager;
 
     protected currentWidget: NavigatableWidget | undefined;
 
@@ -203,6 +206,13 @@ export class WorkspaceVariableContribution implements VariableContribution {
                 return relativePath && new Path(relativePath).dir.toString();
             }
         }));
+        variables.registerVariable(scoped({
+            name: 'openFilesRelative',
+            description: 'A comma-separated list of all currently open files, relative to the workspace root',
+            resolve: (context?: URI) => {
+                return this.getAllOpenFilesRelative(context);
+            }
+        }));
     }
 
     getWorkspaceRootUri(uri: URI | undefined = this.getResourceUri()): URI | undefined {
@@ -219,4 +229,21 @@ export class WorkspaceVariableContribution implements VariableContribution {
         return path && path.toString();
     }
 
+    getAllOpenFilesRelative(context?: URI): string {
+        const openFiles: string[] = [];
+        
+        // Get all open editors from the editor manager
+        for (const editor of this.editorManager.all) {
+            const uri = editor.getResourceUri();
+            if (uri) {
+                const relativePath = this.getWorkspaceRelativePath(uri, context);
+                if (relativePath) {
+                    openFiles.push(`'${relativePath}'`);
+                }
+            }
+        }
+        
+        return openFiles.join(', ');
+    }
+
 }
